from LR2.Interfaces.Interfaces import IAttacker, ISkillUser
from LR2.Scripts.Entity.basic_entity import Character
from LR2.Scripts.Types.types import TypeVerifyInput, TypeActionsCharacters
from LR2.Scripts.command.command import Command


class InputManager():
    def __init__(self, team: Command):
        self.team = team

    def _print_header(self, text):
        print(f"\n{'‚ïê' * 50}")
        print(f"üéØ {text}")
        print(f"{'‚ïê' * 50}")

    def _print_success(self, text):
        print(f"‚úÖ {text}")

    def _print_error(self, text):
        print(f"‚ùå {text}")

    def _print_warning(self, text):
        print(f"‚ö†Ô∏è  {text}")

    def _print_info(self, text):
        print(f"üí° {text}")

    def InputCharPick(self):
        while True:
            self.team.ShowInfoTeam()
            self._print_header("–í–´–ë–û–† –ü–ï–†–°–û–ù–ê–ñ–ê")
            print("üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:")
            for i in range(1, len(self.team.GetTeam()) + 1):
                print(f"   {i}Ô∏è‚É£  –ì–µ—Ä–æ–π #{i}")

            self._print_info(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ö–æ–¥–∞ (1-{len(self.team.GetTeam())}):")

            try:
                input_pick = int(input("üìù –í–∞—à –≤—ã–±–æ—Ä: "))

                if input_pick in self.team.GetLengthTeam():
                    self._print_success(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ #{input_pick}")
                    return input_pick
                else:
                    self._print_error("–ü–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

            except ValueError:
                self._print_error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            except Exception:
                self._print_error("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!")

    def VerifyPick(self):
        while True:
            self._print_header("–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–´–ë–û–†–ê")
            print("üîÑ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
            print("   üü¢ 'y' - –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
            print("   üî¥ 'n' - –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")
            print("   üü° 'off' - –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")

            verify_input = input("üìù –í–∞—à –≤—ã–±–æ—Ä (y/n/off): ").lower()

            if verify_input == "y":
                self._print_success("–í—ã–±–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
                return TypeVerifyInput.yes
            elif verify_input == "n":
                self._print_warning("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω!")
                return TypeVerifyInput.no
            elif verify_input == "off":
                self._print_info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                return TypeVerifyInput.off_verify
            else:
                self._print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ y, n –∏–ª–∏ off")

    def PrintCanAtions(self, can_attack, can_spell):
        self._print_header("–î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø")

        if not can_attack and not can_spell:
            self._print_warning("–≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è!")
            return None

        actions = []
        if can_attack:
            actions.append("‚öîÔ∏è  –ê–¢–ê–ö–ê (A)")
        if can_spell:
            actions.append("üîÆ –ó–ê–ö–õ–ò–ù–ê–ù–ò–ï (S)")

        print("üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        for action in actions:
            print(f"   {action}")

    def InputAttack(self, teammate: Character):
        while True:
            can_attack = issubclass(teammate.__class__, IAttacker)
            can_spell = issubclass(teammate.__class__, ISkillUser) and teammate.can_use_skill()

            self.PrintCanAtions(can_attack, can_spell)

            if not can_attack and not can_spell:
                self._print_warning("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–π")
                return TypeActionsCharacters.ReturnPick

            try:
                self._print_info("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

                if can_attack and can_spell:
                    input_attack = input("üìù –í–∞—à –≤—ã–±–æ—Ä (A/S): ").upper()
                elif can_attack:
                    input_attack = input("üìù –í–∞—à –≤—ã–±–æ—Ä (A): ").upper()
                else:
                    input_attack = input("üìù –í–∞—à –≤—ã–±–æ—Ä (S): ").upper()

                if can_attack and (input_attack == "A" or input_attack == "–ê"):
                    self._print_success("–í—ã–±—Ä–∞–Ω–∞ –∞—Ç–∞–∫–∞! ‚öîÔ∏è")
                    return TypeActionsCharacters.Attack
                elif can_spell and input_attack == "S":
                    self._print_success("–í—ã–±—Ä–∞–Ω–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ! üîÆ")
                    return TypeActionsCharacters.Spell
                else:
                    self._print_error("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")

            except Exception:
                self._print_error("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!")